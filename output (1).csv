# Load a dataset
""
data = pd.read_csv('/content/sample_data/insurance.csv')
data
""
"X = data['bmi'].values.reshape(-1, 1)"
Y = data['charges'].values
"print(""Dataset loaded with"", len(X), ""data points."")"
"plt.scatter(X, Y, color='blue')"
"plt.title(""Scatter Plot of BMI vs Insurance Charges"")"
"plt.xlabel(""BMI"")"
"plt.ylabel(""Insurance Charges"")"
plt.show()
from sklearn.linear_model import LinearRegression
""
model = LinearRegression()
"model.fit(X, Y)"
""
slope = model.coef_[0]
intercept = model.intercept_
"print(f""Slope (m): {slope}"")"
"print(f""Intercept (c): {intercept}"")"
"r_squared = model.score(X, Y)"
"print(f""RÂ²: {r_squared}"")"
Y_pred = model.predict(X)
""
"plt.scatter(X, Y, color='blue', label='Original Data')"
"plt.plot(X, Y_pred, color='red', label='Regression Line')"
"plt.title(""Regression Line Overlay"")"
"plt.xlabel(""BMI"")"
"plt.ylabel(""Insurance Charges"")"
plt.legend()
plt.show()
residuals = Y - Y_pred
""
"plt.scatter(X, residuals, color='purple')"
"plt.axhline(y=0, color='yellow', linestyle='--')"
"plt.title(""Residual Plot"")"
"plt.xlabel(""BMI"")"
"plt.ylabel(""Residuals"")"
plt.show()
"mae = mean_absolute_error(Y, Y_pred)"
"mse = mean_squared_error(Y, Y_pred)"
rmse = np.sqrt(mse)
""
"print(f""Mean Absolute Error (MAE): {mae}"")"
"print(f""Mean Squared Error (MSE): {mse}"")"
"print(f""Root Mean Squared Error (RMSE): {rmse}"")"
Mean Absolute Error (MAE): 9172.351145507564
Mean Squared Error (MSE): 140777900.09850758
Root Mean Squared Error (RMSE): 11864.986308399499
plt.title('Cost Function J')
plt.xlabel('No. of iterations')
plt.ylabel('Cost')
plt.plot(past_costs)
plt.show()
alpha = 0.01 #Step size
iterations = 2000 #No. of iterations
m = y.size #No. of data points
np.random.seed(123) #Set the seed
theta = np.random.rand(2) #Pick some random values to start with
""
#GRADIENT DESCENT
"def gradient_descent(x, y, theta, iterations, alpha):"
past_costs = []
past_thetas = [theta]
for i in range(iterations):
"prediction = np.dot(x, theta)"
error = prediction - y
"cost = 1/(2*m) * np.dot(error.T, error)"
past_costs.append(cost)
"theta = theta - (alpha * (1/m) * np.dot(x.T, error))"
past_thetas.append(theta)
""
"return past_thetas, past_costs"
""
#Pass the relevant variables to the function and get the new values
back...
"past_thetas, past_costs = gradient_descent(x, y, theta, iterations, alpha)"
theta = past_thetas[-1]
""
#Print the results...
"print(""Gradient Descent: {:.2f}, {:.2f}"".format(theta[0], theta[1]))"
#Animation output for gradient decent scatterplot
import io
import base64
from IPython.display import HTML
""
filename = 'animation.gif'
""
"video = io.open(filename, 'r+b').read()"
encoded = base64.b64encode(video)
"HTML(data='''<img src=""data:image/gif;base64,{0}"" type=""gif"""
/>'''.format(encoded.decode('asc ii')))
""
